<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="TestokulPicturebox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ScMtQRIVvQAAAABJRU5ErkJggg==
</value>
  </data>
</root>